# Project Rules and Guidelines

# Core Project Rules
- This is an educational project, don't try to fix the security vulnerabilities, we need them for POCs to work
- When creating new files, check if the file already exists in the project
- Don't ever use express.js, use fusion.js instead
- Don't introduce new dependencies unless it's absolutely necessary
- Use built in fusion.js features as much as possible
- Use koa which is native to fusion.js
- Don't modify core files (Dockerfile, docker-compose.yml, package.json)
- Always use scripts under devops/ directory for build/run/test operations
- Always check operation results via logs under logs/ directory
- Always update or create documentation under doc/ when progress is made

# Directory and Command Execution Rules
1. Always check current working directory with 'pwd' before executing directory-dependent commands
2. Never use relative paths without first verifying current directory
3. Use absolute paths when working across different directories
4. Store the project root path in a variable for reference
5. Before any 'cd' command, verify if already in target directory
6. After any directory change, verify new location with 'pwd'
7. Use $PWD to get absolute path of current directory
8. Keep track of directory stack using 'pushd' and 'popd'
9. When in doubt about location, use 'pwd' to verify
10. Use command output to determine next directory operation

# Docker and Container Rules
- Always use "docker-compose up -d" instead of "docker-compose up", to ensure you always have shell
- Always use 'docker build' instead of 'docker compose build'
- Use yarn with --verbose flag
- Always run 'source venv/bin/activate' before running python scripts

# Docker Image Versioning Rules
1. Version Format: MAJOR.MINOR
   - MAJOR: Breaking changes
   - MINOR: New features or non-breaking changes

2. Image Tags:
   - Format: VERSION-GITSHA
   - Example: 0.7-3f1a721

3. Never reuse version tags
   - Each build should get a new version number
   - Old versions should remain available in registries

4. Registry Rules:
   - Development: Local registry (invoicer:VERSION-GITSHA)
   - Staging: AWS ECR (339713064450.dkr.ecr.us-west-2.amazonaws.com/entropage/invoicer:VERSION-GITSHA)
   - Production: Same as staging but with additional testing

5. Version History:
   0.1: Initial release
   0.2: Added authentication
   0.3: Added SSRF vulnerability
   0.4: Added command injection
   0.5: Added path traversal
   0.6: Added IDOR vulnerability
   0.7: Integrated test suite and vulnerability verification

6. Build Process:
   - Always build from a clean workspace
   - Tag with both version and git SHA
   - Push to all required registries
   - Document changes in version history

# Error Handling Rules
1. Check exit codes after critical operations
2. Provide fallback paths for failed directory changes
3. Validate paths before operations
4. Handle path-related errors gracefully
5. Log directory-related errors

# Best Practices for Automation
1. Use path variables instead of hardcoded paths
2. Maintain a consistent directory structure
3. Document directory dependencies
4. Use directory guards for critical operations
5. Implement path validation functions
